import { encodeBase64 } from "@std/encoding";

// Init rust project
// wasm-pack build --target deno --out-dir ../wasm
const command = new Deno.Command("wasm-pack", {
  args: ["build", "--target", "web", "--out-dir", "../wasm"],
  cwd: "./rust",
  stdout: "inherit",
  stderr: "inherit",
});
await command.output();

// Copy files
await Deno.copyFile("./wasm/librsync_rust_bg.wasm", "./src/librsync.wasm");
await Deno.copyFile("./wasm/librsync_rust.d.ts", "./src/initLibrsync.d.ts");
await Deno.copyFile("./wasm/librsync_rust.js", "./src/initLibrsync.js");

const wasmFile = await Deno.readFile("./src/librsync.wasm");
const base64 = encodeBase64(wasmFile);

const outFile = [
  `// This file is generated by build.ts`,
  `import { decodeBase64 } from "@std/encoding/base64";`,
  `// @ts-types='./src/initLibrsync.d.ts'`,
  `import initLibrsync from "./src/initLibrsync.js";`,
  ``,
  `export default function librsync() {`,
  `  const bytes = decodeBase64(`,
  `    "${base64}",`,
  `  );`,
  `  const wasmRes = new Response(bytes, {`,
  `    headers: {`,
  `      "Content-Type": "application/octet-stream",`,
  `    },`,
  `  });`,
  `  return initLibrsync(wasmRes);`,
  `}`,
].join("\n");

await Deno.writeTextFile("./mod.ts", outFile);
