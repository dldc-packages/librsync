// This file is generated by build.ts
import { decodeBase64 } from "@std/encoding/base64";
// @ts-types='./src/initLibrsync.d.ts'
import {
  apply as librsync_apply,
  diff as librsync_diff,
  initSync,
  signature as librsync_signature,
} from "./src/initLibrsync.js";

const wasmSource =
  // deno-fmt-ignore
  "BASE64_ENCODED_WASM_BINARY";
let initialized = false;

function ensureInit() {
  if (initialized) {
    return;
  }
  initialized = true;
  initSync({ module: decodeBase64(wasmSource) });
}

/**
 * Compute the signature (or checksum) of the given file
 * @param data The input file
 * @param blockSize The size of the blocks to use (default 1024, must be greater than 0)
 * @param cryptoHashSize must be at most 16, the length of an MD4 hash
 * @returns The signature of the file
 */
export function signature(
  data: Uint8Array,
  blockSize: number = 1024,
  cryptoHashSize: number = 16,
): Uint8Array {
  ensureInit();
  return librsync_signature(data, blockSize, cryptoHashSize);
}

/**
 * Given a signature and a new file, compute the diff between the two
 * @param signature The signature of the original file (as computed by `signature`)
 * @param otherFile The file to compare against the original
 * @returns A patch file that can be used to transform the original file into the new one
 */
export function diff(signature: Uint8Array, otherFile: Uint8Array): Uint8Array {
  ensureInit();
  return librsync_diff(signature, otherFile);
}

/**
 * Apply a patch to a file to get the new file
 * @param file The original file
 * @param patch The patch file (as computed by `diff`)
 * @returns The updated file which should match the original file
 */
export function apply(file: Uint8Array, patch: Uint8Array): Uint8Array {
  ensureInit();
  return librsync_apply(file, patch);
}
